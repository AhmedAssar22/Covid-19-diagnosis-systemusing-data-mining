package knn1;
import static java.nio.file.Files.size;
import java.util.*;

public class KNN1 {

    // the data
    static double[][] instances = {
		
        {2.9,1.9,0.8,0.2,0,0,29,37.4,97},
        {3.5,2.1,0.9,0.4,0,0,16.5,37.2,97},
        {4.6,0,0,0,0,0,193.7,37.5,99},
        {5.6,0,0,0,0,0,16.7,37.1,97},
        {15.7,0,0,0,0,0,2.4,37.1,95},
        {12,6.7,2.3,1.6,1.3,0.1,41.2,35.9,99},
        {4.2,1.9,2,0.3,0,0,22.1,38,84},
        {6.5,4.2,1.7,0.5,0,0,10,37.9,87},
        {4.9,3.7,0.7,0.4,0,0,28.1,38,89},
        {9.5,0,0,0,0,0,0.5,36.7,99}
        
	};
    
    private static String findMajorityClass(String[] array)
	{
		//add the String array to a HashSet to get unique String values
		Set<String> h = new HashSet<String>(Arrays.asList(array));
		//convert the HashSet back to array
		String[] uniqueValues = h.toArray(new String[0]);
		//counts for unique strings
		int[] counts = new int[uniqueValues.length];
		// loop thru unique strings and count how many times they appear in origianl array   
		for (int i = 0; i < uniqueValues.length; i++) {
			for (int j = 0; j < array.length; j++) {
				if(array[j].equals(uniqueValues[i])){
					counts[i]++;
				}
			}        
		
                }
                
                for (int i = 0; i < uniqueValues.length; i++)
			System.out.println(uniqueValues[i]);
		for (int i = 0; i < counts.length; i++)
			System.out.println(counts[i]);


		int max = counts[0];
		for (int counter = 1; counter < counts.length; counter++) {
			if (counts[counter] > max) {
				max = counts[counter];
			}
		}
		System.out.println("max # of occurences: "+max);
                
                // how many times max appears
		//we know that max will appear at least once in counts
		//so the value of freq will be 1 at minimum after this loop
		int freq = 0;
		for (int counter = 0; counter < counts.length; counter++) {
			if (counts[counter] == max) {
				freq++;
			}
		}

		//index of most freq value if we have only one mode
		int index = -1;
		if(freq==1){
			for (int counter = 0; counter < counts.length; counter++) {
				if (counts[counter] == max) {
					index = counter;
					break;
				}
			}
			//System.out.println("one majority class, index is: "+index);
			return uniqueValues[index];
                        } else{//we have multiple modes
			int[] ix = new int[freq];//array of indices of modes
			System.out.println("multiple majority classes: "+freq+" classes");
			int ixi = 0;
			for (int counter = 0; counter < counts.length; counter++) {
				if (counts[counter] == max) {
					ix[ixi] = counter;//save index of each max count value
					ixi++; // increase index of ix array
				}
			}
                    for (int counter = 0; counter < ix.length; counter++)         
				System.out.println("class index: "+ix[counter]);       

			//now choose one at random
			Random generator = new Random();        
			//get random number 0 <= rIndex < size of ix
			int rIndex = generator.nextInt(ix.length);
			System.out.println("random index: "+rIndex);
			int nIndex = ix[rIndex];
			//return unique value at that index 
			return uniqueValues[nIndex];
		}

	}
    /**
	 * Returns the mean (average) of values in an array of doubless
	 * sums elements and then divides the sum by num of elements
	 *
	 * @param  array an array of doubles
	 * @return  the mean
	 */ 
	private static double meanOfArray(double[] m) {
		double sum = 0.0;
		for (int j = 0; j < m.length; j++){
			sum += m[j];
		}
		return sum/m.length;
	}
    public static void main(String[] args) {
        int k = 7;// # of neighbours  
		//list to save class data
		List<Class> classList = new ArrayList<Class>();
                //list to save distance result
		List<Result> resultList = new ArrayList<Result>();
                // add class data to classList       
		classList.add(new Class(instances[0],"Non-Covid"));
		classList.add(new Class(instances[1],"Non-Covid"));
		classList.add(new Class(instances[2],"Non-Covid"));
		classList.add(new Class(instances[3],"Non-Covid"));
		classList.add(new Class(instances[4],"Non-Covid"));
		classList.add(new Class(instances[5],"Non-Covid"));
		classList.add(new Class(instances[6],"Non-Covid"));
		classList.add(new Class(instances[7],"Covid"));
		classList.add(new Class(instances[8],"Covid"));
                classList.add(new Class(instances[9],"Covid"));
                
                
                //data about unknown class
		double[] query = {6.1,4.3,1.22,0.52,0,0.02,80.8,37.9,85};
                
                //find disnaces
		for(Class c : classList){
			double dist = 0.0;  
			for(int j = 0; j < c.cAttributes.length; j++){    	     
				dist += Math.pow(c.cAttributes[j] - query[j], 2) ;
//				System.out.print(c.cAttributes[j]+" ");    	     
			}
			double distance = Math.sqrt( dist );
			resultList.add(new Result(distance,c.cName));
//			System.out.println(distance);
		} 
//                        System.out.println(resultList);
		Collections.sort(resultList, new DistanceComparator());
		String[] ss = new String[k];
		for(int x = 0; x < k; x++){
			System.out.println(resultList.get(x).cName+ " .... " + resultList.get(x).distance);
			//get classes of k nearest instances (class names) from the list into an array
			ss[x] = resultList.get(x).cName;
		}
		String majClass = findMajorityClass(ss);
		System.out.println("Class of new instance is: "+majClass);  
                
    }
    
    //simple class to model instances (features + class)
	static class Class {	
		double[] cAttributes;
		String cName;
		public Class(double[] cAttributes, String cName){
			this.cName = cName;
			this.cAttributes = cAttributes;	    	    
		}
	}
	//simple class to model results (distance + class)
	static class Result {	
		double distance;
		String cName;
		public Result(double distance, String cName){
			this.cName = cName;
			this.distance = distance;	    	    
		}
	}
	//simple comparator class used to compare results via distances
	static class DistanceComparator implements Comparator<Result> {
		@Override
		public int compare(Result a, Result b) {
			return a.distance < b.distance ? -1 : a.distance == b.distance ? 0 : 1;
		}  }
}
